import express from 'express';
import cors from 'cors';
import routes from '../api';
import config from 'config';
import session from 'express-session';
import httpContext from 'express-http-context';
import swaggerJsdoc from 'swagger-jsdoc';
import swaggerUi from 'swagger-ui-express';
import methodOverride from 'method-override';
import apiMetrics from 'prometheus-api-metrics';

export default ({ app }: { app: express.Application }) => {
  /**
   * SwaggerUI
   * /api-docsにアクセスした場合、swagger-uiの画面が表示される
   * 商用環境以外で動作
   */
  if (process.env.NODE_ENV !== 'production') {
    const options: object = {
      swaggerDefinition: {
        openapi: '3.0.2',
        // Like the one described here: https://swagger.io/specification/#infoObject
        info: {
          title: 'Trace API',
          version: '1.0.0',
          description: 'Trace API with autogenerated swagger doc',
        },
        components: {
          securitySchemes: {
            bearerAuth: {
              type: 'http',
              scheme: 'bearer',
              bearerFormat: 'JWT',
            },
          },
        },
      },
      // List of files to be processes. You can also set globs '../api/routes/*.ts'
      apis: ['**/*.ts'],
    };

    const specs = swaggerJsdoc(options);
    app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(specs));
  }

  app.use(cors());
  app.use(methodOverride());
  app.use(express.json());
  app.use(
    session({
      secret: 'secret',
      resave: false,
      saveUninitialized: false,
      cookie: {
        httpOnly: true,
        secure: false,
        maxage: 1000 * 60 * 30,
      },
    }),
  );

  app.use(httpContext.middleware);

  /**
   * メトリクス
   */
  app.use(apiMetrics());

  app.use(config.api.prefix, routes());

  /// 404エラーハンドラー
  app.use((req, res, next) => {
    const err = new Error('Not Found');
    err['status'] = 404;
    next(err);
  });

  // その他のエラーハンドラー
  app.use((err, req, res, next) => {
    if (err.name === 'UnauthorizedError') {
      return res.status(err.status).send({ message: err.message }).end();
    } else {
      res.status(err.status || 500);
      res.json({
        errors: {
          message: err.statusText,
        },
      });
    }
    next(err);
  });
};
